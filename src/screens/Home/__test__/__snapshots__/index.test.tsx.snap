// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TodoItem /> should match snapshot for form creation 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 45px 20px;
  height: 100px;
  margin-bottom: 25px;
  font-family: "Mochiy Pop One",sans-serif;
  background: linear-gradient( 77.07deg, rgb(69,183,204) 0%, rgb(75,207,187) 100% );
}

.c1 {
  border-radius: 12px;
  padding: 15px 30px;
  margin-bottom: 15px;
  background: url(bg-pattern.svg) #fff bottom right no-repeat;
  box-shadow: rgb(52 58 64 / 6%) 3px 1px 13px 0;
}

.c2 {
  margin-bottom: 20px;
}

.c3:first-letter {
  text-transform: uppercase;
}

.c7 {
  font-size: 15px;
}

.c7:first-letter {
  text-transform: uppercase;
}

.c5 {
  border: 1px solid #283451;
  width: 1.5rem;
  height: 1.5rem;
  display: inline-block;
  margin-right: 10px;
  text-align: center;
}

.c5:after {
  content: " ";
  display: inline-block;
  width: 0.5rem;
  height: 1rem;
  box-sizing: border-box;
  -webkit-transform: rotate(40deg);
  -ms-transform: rotate(40deg);
  transform: rotate(40deg);
  border: 0.1rem solid #283451;
  border-top: 0;
  border-left: 0;
}

.c9 {
  border: 1px solid #283451;
  width: 1.5rem;
  height: 1.5rem;
  display: inline-block;
  margin-right: 10px;
  text-align: center;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  margin: 15px 0;
}

.c4 .c6 {
  -webkit-text-decoration: line-through;
  text-decoration: line-through;
}

.c4 .c6 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  margin-top: -4px;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  margin: 15px 0;
}

.c8 .c6 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  margin-top: -4px;
}

.c10 {
  position: absolute;
  right: 50px;
  bottom: 50px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  color: #ffffff;
  cursor: pointer;
  width: 100px;
  height: 100px;
  font-size: 80px;
  border-radius: 50%;
  background: linear-gradient( 77.07deg, rgb(69,183,204) 0%, rgb(75,207,187) 100% );
  box-shadow: rgb(52 58 64 / 6%) 3px 1px 13px 0;
}

@media screen and (max-width:767px) {
  .c10 {
    width: 80px;
    height: 80px;
    font-size: 60px;
  }
}

<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Home>
        <AppWrapper>
          <Header>
            <styled.div>
              <div
                className="c0"
              >
                <Link
                  to="/"
                >
                  <LinkAnchor
                    href="/"
                    navigate={[Function]}
                  >
                    <a
                      href="/"
                      onClick={[Function]}
                    >
                      <h3>
                        Spoke.ai
                      </h3>
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
            </styled.div>
          </Header>
          <ErrorMessage />
          <Container
            fluid={false}
          >
            <div
              className="container"
            >
              <Index />
              <Masonry
                breakpointCols={
                  Object {
                    "1199": 3,
                    "480": 1,
                    "991": 2,
                    "default": 4,
                  }
                }
                className="my-masonry-grid"
                columnClassName="my-masonry-grid_column"
              >
                <div
                  className="my-masonry-grid"
                >
                  <div
                    className="my-masonry-grid_column"
                    key="0"
                    style={
                      Object {
                        "width": "33.333333333333336%",
                      }
                    }
                  >
                    <Link
                      key=".$1234567890"
                      to="/todo/1234567890"
                    >
                      <LinkAnchor
                        href="/todo/1234567890"
                        navigate={[Function]}
                      >
                        <a
                          href="/todo/1234567890"
                          onClick={[Function]}
                        >
                          <TodoItem
                            todo={
                              Object {
                                "id": "1234567890",
                                "items": Array [
                                  Object {
                                    "description": "description 1",
                                    "isDone": true,
                                  },
                                  Object {
                                    "description": "description 2",
                                    "isDone": false,
                                  },
                                ],
                                "title": "Title",
                              }
                            }
                          >
                            <styled.div
                              completed={false}
                            >
                              <div
                                className="c1"
                              >
                                <styled.div>
                                  <div
                                    className="c2"
                                  >
                                    <styled.h4>
                                      <h4
                                        className="c3"
                                      >
                                        Title
                                      </h4>
                                    </styled.h4>
                                    <ProgressBar
                                      animated={false}
                                      isChild={false}
                                      label="50%"
                                      max={100}
                                      min={0}
                                      now={50}
                                      striped={true}
                                      variant="info"
                                      visuallyHidden={false}
                                    >
                                      <div
                                        className="progress"
                                      >
                                        <div
                                          aria-valuemax={100}
                                          aria-valuemin={0}
                                          aria-valuenow={50}
                                          className="progress-bar bg-info progress-bar-striped"
                                          role="progressbar"
                                          style={
                                            Object {
                                              "width": "50%",
                                            }
                                          }
                                        >
                                          50%
                                        </div>
                                      </div>
                                    </ProgressBar>
                                  </div>
                                </styled.div>
                                <styled.div
                                  checked={true}
                                  key="0"
                                >
                                  <div
                                    checked={true}
                                    className="c4"
                                  >
                                    <styled.span
                                      checked={true}
                                    >
                                      <span
                                        checked={true}
                                        className="c5"
                                      />
                                    </styled.span>
                                    <styled.span>
                                      <span
                                        className="c6 c7"
                                      >
                                        description 1
                                      </span>
                                    </styled.span>
                                  </div>
                                </styled.div>
                                <styled.div
                                  checked={false}
                                  key="1"
                                >
                                  <div
                                    checked={false}
                                    className="c8"
                                  >
                                    <styled.span
                                      checked={false}
                                    >
                                      <span
                                        checked={false}
                                        className="c9"
                                      />
                                    </styled.span>
                                    <styled.span>
                                      <span
                                        className="c6 c7"
                                      >
                                        description 2
                                      </span>
                                    </styled.span>
                                  </div>
                                </styled.div>
                              </div>
                            </styled.div>
                          </TodoItem>
                        </a>
                      </LinkAnchor>
                    </Link>
                  </div>
                </div>
              </Masonry>
            </div>
          </Container>
          <CreateToDo>
            <Offcanvas
              autoFocus={true}
              backdrop={true}
              enforceFocus={true}
              keyboard={true}
              onHide={[Function]}
              placement="end"
              restoreFocus={true}
              scroll={false}
              show={false}
            >
              <Modal
                autoFocus={true}
                backdrop={true}
                backdropTransition={[Function]}
                enforceFocus={true}
                keyboard={true}
                manager={
                  BootstrapModalManager {
                    "handleContainerOverflow": true,
                    "isRTL": false,
                    "modals": Array [],
                  }
                }
                onEnter={[Function]}
                onExited={[Function]}
                onHide={[Function]}
                renderBackdrop={[Function]}
                renderDialog={[Function]}
                restoreFocus={true}
                show={false}
                transition={[Function]}
              />
            </Offcanvas>
            <styled.div
              onClick={[Function]}
            >
              <div
                className="c10"
                onClick={[Function]}
              >
                +
              </div>
            </styled.div>
          </CreateToDo>
        </AppWrapper>
      </Home>
    </Router>
  </BrowserRouter>
</Provider>
`;
